# -*- coding: utf-8 -*-
"""CO_INT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PwNGxCVSsLp6GAkkIzTcWIkvzo5gMMTA
"""

from sqlalchemy import create_engine
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import itertools
from sklearn import linear_model
import statsmodels.tsa.stattools as ts
import statsmodels.api as sm
import time

def get_data(stock_a, stock_b, db_path):

    conn_string = "sqlite:///" + db_path
    engine = create_engine(conn_string, echo = False)

    a_df = pd.read_sql_table(stock_a, engine)
    a_df = a_df.drop(labels = 'index', axis = 1)
    a_df = a_df.rename(columns={"1. open": "Open", "2. high" : "High",
                             "3. low": "Low", "4. close": "Close",
                             "5. volume": "Volume"})
    a_df = a_df.drop("date", axis = 1)

    b_df = pd.read_sql_table(stock_b, engine)
    b_df = b_df.drop(labels = 'index', axis = 1)
    b_df = b_df.rename(columns={"1. open": "Open", "2. high" : "High",
                             "3. low": "Low", "4. close": "Close",
                             "5. volume": "Volume"})
    b_df = b_df.drop("date", axis = 1)

    return a_df, b_df

def adf_regression(a_df, b_df):
   
    x_points = a_df['Close'].values
    y_points = b_df['Close'].values

    reg = linear_model.LinearRegression()
    x = x_points.reshape(-1,1)
    y = y_points
    reg.fit(x,y)

    residuals = y - reg.predict(x)

    adf = sm.tsa.stattools.adfuller(residuals)
   
    print('ADF test statistic: %.02f' % adf[0])
    for key, value in adf[4].items():
        print('\t%s: %.3f' % (key, value))
    print('p-value: %.03f' % adf[1])

    main_df = pd.DataFrame()
    main_df['Residuals'] = residuals

    a_0 = a_df['Close'].iloc[0]
    b_0 = b_df['Close'].iloc[0]
    a_df['Close'] = ((a_df['Close'] - a_0)/a_0)*100
    b_df['Close'] = ((b_df['Close'] - b_0)/b_0)*100

    stock_a = a_df['Close'].values
    stock_b = b_df['Close'].values
    main_df['Stock A'] = stock_a
    main_df['Stock B'] = stock_b
   

    return main_df
   
def plot_residuals(main_df, stock_a, stock_b):

    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()

    label_a = ax1.plot(main_df.index, main_df['Residuals'], label = 'Residuals', c = 'black')
    label_b = ax2.plot(main_df.index, main_df['Stock A'], label = stock_a, c = '#bd4ab6')
    label_c = ax2.plot(main_df.index, main_df['Stock B'], label = stock_b, c = '#34abeb')
   
    labels =  label_a + label_b + label_c
    labs = [l.get_label() for l in labels]
    ax1.legend(labels, labs, loc = 8)

    residuals = main_df['Residuals'].values
    res_mean = residuals.mean()
    res_std = residuals.std()

    sigma_O = ((residuals[-1] - res_mean)/res_std)
    print("Sigma of: {}".format(sigma_O))

    ax1.plot(np.full((len(main_df), 1), res_mean), c = '#1E293D', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot(np.full((len(main_df), 1), res_mean + .5*res_std), c = '#445E76', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot(np.full((len(main_df), 1), res_mean - .5*res_std), c = '#445E76', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot(np.full((len(main_df), 1), res_mean + res_std), c = '#7498B7', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot(np.full((len(main_df), 1), res_mean - res_std), c = '#7498B7', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot(np.full((len(main_df), 1), res_mean + 1.5*res_std), c = '#B1CCE0', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())
    ax1.plot( np.full((len(main_df), 1), res_mean - 1.5*res_std), c = '#B1CCE0', linestyle = '--', label = 'Mean (%.3f)' % main_df['Residuals'].mean())

    plt.show()

def find_pairs(db_path):

        print("Finding Pairs...")
        conn_string = "sqlite:///" + db_path
        engine = create_engine(conn_string, echo = False)
       
        tickers_df = pd.read_sql_table("Tickers", engine)
        tickers = tickers_df['Tickers'].values
        tickers = tickers.tolist()
        tickers.append("SPY")
        tickers.append("QQQ")
        tickers.append("IWM")

 
        main_df = pd.DataFrame()
        for ticker in tickers:

            try:
                   
                db_table = pd.read_sql_table(ticker.upper(), engine)
                db_table = db_table.drop(['date', '1. open', '2. high', '3. low',
                                          '5. volume'], axis = 1)
                db_table = db_table.tail(1400)
                data = db_table['4. close'].values

                main_df[ticker] = data
               
            except:
               
                print("Table not found for {}".format(ticker))
         
        for pair in itertools.combinations(tickers,2):

            try:
               
                a = pair[0]
                b = pair[1]

                a_val = main_df[a].values
                b_val = main_df[b].values

                reg = linear_model.LinearRegression()
                x = a_val.reshape(-1,1)
                y = b_val
                reg.fit(x,y)

                residuals = y - reg.predict(x)

                res_mean = residuals.mean()
                res_std = residuals.std()
                last_res = residuals[-1]

               
                pos_sigma = res_mean + 1.5*res_std
                neg_sigma = res_mean - 1.5*res_std

                adf = sm.tsa.stattools.adfuller(residuals)
                pval = adf[1]

                if pval <= .02:
                   
                    if last_res <= neg_sigma or last_res >= pos_sigma:
                        sigma_O = (last_res - res_mean)/res_std
                        print("")
                        print("Stock A: {}, Stock B: {}".format(a,b))
                        print("Sigma of: {}".format(sigma_O))
                        print('p-value: %.03f' % adf[1])
                        print("")
                       
            except:
                a = 1
                   
       
           
   
if __name__ == '__main__':

    db_path = "C:\OptionDB\INTRA_DAY.db"
    #find_pairs(db_path)
   
    stock_a = "SPY"
    stock_b = "IWM"
    a_df, b_df = get_data(stock_a, stock_b, db_path)
    a_df.to_csv("main.csv")
    plt.plot(a_df.Close)
    plt.show()